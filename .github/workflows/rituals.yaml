on:
  push:
    branches:
      - master
      - ghactions
  pull_request:
    branches:
      - master

name: Rituals

jobs:

  Rituals:
    name: Rituals
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: ubuntu-18.04, r: '4.0', rspm: "https://packagemanager.rstudio.com/all/__linux__/bionic/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2
        name: Git Pull (master)
        if: github.event_name != 'pull_request'

      - uses: actions/checkout@v2
        name: Git Pull (PR)
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Git Config
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - uses: r-lib/actions/setup-r@master
        id: install-r
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: Install pak and query dependencies
        shell: Rscript {0}
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          saveRDS(pak::pkg_deps_tree("local::.", dependencies = TRUE), ".github/r-depends.rds")
      - name: Cache R packages
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ matrix.config.os }}-${{ steps.install-r.outputs.installed-r-version }}-rituals-1-${{ hashFiles('.github/r-depends.rds') }}
          restore-keys: ${{ matrix.config.os }}-${{ steps.install-r.outputs.installed-r-version }}-rituals-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        shell: Rscript {0}
        run: |
          pak::local_system_requirements(execute = TRUE)
          pak::pkg_system_requirements("devtools", execute = TRUE)
          pak::pkg_system_requirements("rmarkdown", execute = TRUE)
      # # xquartz and cairo are needed for Cairo package.
      # # harfbuzz and fribidi are needed for textshaping package.
      # - name: Mac systemdeps
      #   if: runner.os == 'macOS'
      #   run: |
      #     brew install --cask xquartz
      #     brew install cairo
      #     brew install harfbuzz fribidi
      # # Use a shorter temp directory for pak installations, due to filename
      # # length issues on Windows. https://github.com/r-lib/pak/issues/252
      # - name: Windows temp dir
      #   if: runner.os == 'Windows'
      #   run: |
      #     New-Item -Path "C:\" -Name "tmp" -ItemType Directory
      #     echo "TMPDIR=c:\tmp" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install dependencies
        shell: Rscript {0}
        run: |
          pak::local_install(upgrade = TRUE, dependencies = TRUE)

      - name: Document
        run: |
          Rscript -e 'pak::pkg_install("roxygen2")'
          Rscript -e 'roxygen2::roxygenise()'
          git add man/\* NAMESPACE
          git commit -m 'Document (GitHub Actions)' || echo "No documentation changes to commit"

      - name: Readme
        run: |
          Rscript -e 'pak::pkg_install(c("devtools", "rmarkdown"))'
          Rscript -e 'devtools::build_readme(quiet = FALSE)'
          git commit README.md -m 'Re-build README.Rmd' || echo "No readme changes to commit"

      - name: Git Push (PR)
        uses: r-lib/actions/pr-push@master
        if: github.event_name == 'pull_request'
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Git Push (MASTER)
        if: github.event_name == 'push'
        run: |
          git push https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git HEAD:${{ github.ref }} || echo "No changes to push"

      # - name: Fix path for Windows caching
      #   if: runner.os == 'Windows'
      #   # This is needed because if you use the default tar at this stage,
      #   # C:/Rtools/bin/tar.exe, it will say that it can't find gzip.exe. So
      #   # we'll just set the path so that the original tar that would be
      #   # found, will be found.
      #   run: echo "::add-path::C:/Program Files/Git/usr/bin"
